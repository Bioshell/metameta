rule metametamerge_get_taxdump:
	output: taxdump=temp(config["dbdir"] + "taxdump.tar.gz")
			, names=config["dbdir"] + "names.dmp"
			, nodes=config["dbdir"] + "nodes.dmp"
			, merged=config["dbdir"] + "merged.dmp"
	log: config["dbdir"] + "log/metametamerge_get_taxdump.log"
	benchmark: config["dbdir"] + "log/metametamerge_get_taxdump.time"
	run:
		shell(download("ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz", output.taxdump) + " > {log} 2>&1")
		shell("tar -zxvf {output.taxdump} -C {config[dbdir]} names.dmp nodes.dmp merged.dmp >> {log} 2>&1")

rule metametamerge:
	input:  
		#### config[wildcards.database] -> get only tools that are configure for each database
		#### if tool in config["tools"] -> only if selected in the config file
		tool_profiles = lambda wildcards: [wildcards.sample + "/profiles/" + wildcards.database + "/" + tool + ".profile.out" for tool in config[wildcards.database] if tool in config["tools"]], ## TARGET TOOLS PROFILE
		clean_files = lambda wildcards: [wildcards.sample + "/profiles/" + wildcards.database + "/" + tool + "_clean_files.done" for tool in config[wildcards.database] if tool in config["tools"]], ## TARGET TOOLS CLEAN FILES
		db_check = lambda wildcards: [config["dbdir"] + wildcards.database + "/" + tool + "_db_check.done" for tool in config[wildcards.database] if tool in config["tools"]], ## TARGET TOOLS DBCHECK
		names=config["dbdir"] + "names.dmp",
		nodes=config["dbdir"] + "nodes.dmp",
		merged=config["dbdir"] + "merged.dmp"
	output: final_profile = "{sample}/metametamerge/{database}/final.metametamerge.profile.out"
	log: "{sample}/log/{database}/metametamerge.log"
	benchmark: "{sample}/log/{database}/metametamerge.time"
	params: db_profiles = lambda wildcards: [config["dbdir"] + wildcards.database + "/" + tool + ".dbprofile.out" for tool in config[wildcards.database] if tool in config["tools"]],
			tool_identifier=lambda wildcards: ','.join([tool for tool in config[wildcards.database] if tool in config["tools"]]),	
			tool_method=lambda wildcards: ','.join([config["tools"][tool] for tool in config[wildcards.database] if tool in config["tools"]]),
			detailed = "--detailed" if config["detailed"] else "",
			verbose = "--verbose" if config["verbose"] else ""
	conda: srcdir("../envs/metametamerge.yaml")
	shell: "python3 {config[tool_alt_path][metametamerge]}MetaMetaMerge.py --input-files {input.tool_profiles} --database-profiles {params.db_profiles} --tool-identifier '{params.tool_identifier}' --tool-method '{params.tool_method}' --names-file {input.names} --nodes-file {input.nodes} --merged-file {input.merged} --bins {config[bins]} --cutoff {config[cutoff]} --mode '{config[mode]}' --ranks '{config[ranks]}' --output-file {output.final_profile} {params.detailed} {params.verbose} --output-parsed-profiles > {log} 2>&1"

rule metametamerge_plot:
	input: p="{sample}/metametamerge/{database}/final.metametamerge.profile.out",
			names=config["dbdir"] + "names.dmp",
			nodes=config["dbdir"] + "nodes.dmp",
			merged=config["dbdir"] + "merged.dmp"
	output: "{sample}/metametamerge/{database}/eval.png"
	log: "{sample}/log/{database}/metametamerge_plot.log"
	benchmark: "{sample}/log/{database}/metametamerge_plot.time"
	params: s=lambda wildcards: wildcards.sample,
			d=lambda wildcards: wildcards.database,
	run: 
		shell("python3 " + config["tool_alt_path"]["metametamerge"] + "/plots.py -i " + ' '.join([params.s+"/metametamerge/"+params.d+"/"+t+".parsed_profile.out" for t in sorted(config["tools"])]) +" {input.p} -t '"+','.join(sorted(config["tools"]))+",metametamerge' -c '"+','.join(['p']*(len(config["tools"])+1))+"' -n {input.names} -e {input.nodes} -m {input.merged} -g "+config["samples"][params.s]["gt"]+" -r species -o {output} > {log} 2>&1")
