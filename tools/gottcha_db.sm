rule gottcha_db_1:
	output: db_path['gottcha'] + "GOTTCHA_lookup.tar.gz"
	log: config['dbdir'] + "log/gottcha_db_1.log"
	benchmark: config['dbdir'] + "log/gottcha_db_1.time"
	run:
		shell(download("ftp://ftp.lanl.gov/public/genome/gottcha/GOTTCHA_database_v20150825/GOTTCHA_lookup.tar.gz", output[0]) + " > {log} 2>&1")

rule gottcha_db_2:
	input: db_path['gottcha'] + "GOTTCHA_lookup.tar.gz"
	output: db_path['gottcha'] + "variantSpeciesLookup.dmp"
			, db_path['gottcha'] + "genomeVitals.dmp"
			, db_path['gottcha'] + "familyLookupByGenus.dmp"
			, db_path['gottcha'] + "speciesTreeGI.dmp"
			, db_path['gottcha'] + "genusLookupBySpecies.dmp"
			, db_path['gottcha'] + "orderLookupByFamily.dmp"
			, db_path['gottcha'] + "variantStrainLookup.dmp"
			, db_path['gottcha'] + "classLookupByOrder.dmp"
			, db_path['gottcha'] + "taxLookupBySpecies.dmp"
			, db_path['gottcha'] + "phylumLookupByClass.dmp"
	log: config['dbdir'] + "log/gottcha_db_2.log"
	benchmark: config['dbdir'] + "log/gottcha_db_2.time"
	shell: "tar -zxvf {input} --strip-components 1 -C {db_path[gottcha]} > {log} 2>&1"

rule gottcha_db_3:
	output: db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.tar.gz"
	log: config['dbdir'] + "log/gottcha_db_3.log"
	benchmark: config['dbdir'] + "log/gottcha_db_3.time"
	run:
		shell(download("ftp://ftp.lanl.gov/public/genome/gottcha/GOTTCHA_database_v20150825/GOTTCHA_BACTERIA_c4937_k24_u30.species.tar.gz", output[0]) + " > {log} 2>&1")
	
rule gottcha_db_4:
	input: db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.tar.gz"
	output: db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.amb"
			, db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.ann"
			, db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.bwt"
			, db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.pac"
			, db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.parsedGOTTCHA.dmp"
			, db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.sa"
	log: config['dbdir'] + "log/gottcha_db_4.log"
	benchmark: config['dbdir'] + "log/gottcha_db_4.time"
	shell: "tar -zxvf {input} --strip-components 1 -C {db_path[gottcha]} > {log} 2>&1"

rule gottcha_db_5:
	output: db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.fna.gz"
	log: config['dbdir'] + "log/gottcha_db_5.log"
	benchmark: config['dbdir'] + "log/gottcha_db_5.time"
	run:
		shell(download("ftp://ftp.lanl.gov/public/genome/gottcha/GOTTCHA_database_v20150825/FASTA/GOTTCHA_BACTERIA_c4937_k24_u30.species.fna.gz", output[0]) + " > {log} 2>&1")
	
rule gottcha_db_profile:
	input: db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.fna.gz"
	output: config['dbdir'] + "gottcha.dbaccession.out"
	log: config['dbdir'] + "log/gottcha_db_profile.log"
	benchmark: config['dbdir'] + "log/gottcha_db_profile.time"
	shell: "zcat {input} | grep '>' | grep -o '^[^ ]*' | cut -d '|' -f 4 | sort | uniq > {output} 2> {log}"

rule gottcha_db_check:
	input: ancient(config['dbdir'] + "gottcha.dbaccession.out")
			, ancient(db_path['gottcha'] + "variantSpeciesLookup.dmp")
			, ancient(db_path['gottcha'] + "genomeVitals.dmp")
			, ancient(db_path['gottcha'] + "familyLookupByGenus.dmp")
			, ancient(db_path['gottcha'] + "speciesTreeGI.dmp")
			, ancient(db_path['gottcha'] + "genusLookupBySpecies.dmp")
			, ancient(db_path['gottcha'] + "orderLookupByFamily.dmp")
			, ancient(db_path['gottcha'] + "variantStrainLookup.dmp")
			, ancient(db_path['gottcha'] + "classLookupByOrder.dmp")
			, ancient(db_path['gottcha'] + "taxLookupBySpecies.dmp")
			, ancient(db_path['gottcha'] + "phylumLookupByClass.dmp")
			, ancient(db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.amb")
			, ancient(db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.ann")
			, ancient(db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.bwt")
			, ancient(db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.pac")
			, ancient(db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.parsedGOTTCHA.dmp")
			, ancient(db_path['gottcha'] + "GOTTCHA_BACTERIA_c4937_k24_u30.species.sa")
	output: touch(config['dbdir'] + "gottcha_db_check.done")
	log: config['dbdir'] + "log/gottcha_db_check.log"
	benchmark: config['dbdir'] + "log/gottcha_db_check.time"
	run:
		if not config['keepfiles']: 
			shell(rmTempFilesDB(db_path["gottcha"], input[1:]) + " > {log} 2>&1")
			shell(rmEmptyFolderDB(db_path["gottcha"]) + " >> {log} 2>&1")
